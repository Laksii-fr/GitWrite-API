import axios from "axios";
import settings from "../config.js";
import { GetAccessToken, GetReadmeForRepo } from "../utils/mongo_utils.js";

export async function getUserRepos(username) {
  try {
    const accessToken = await GetAccessToken(username);
    if (!accessToken) {
      throw new Error("Access token is required");
    }
    const REPO_URL = settings.GET_REPO_URL;
    const response = await axios.get(REPO_URL, {
      headers: {
        Authorization: `token ${accessToken}`,
        Accept: "application/vnd.github.v3+json",
      },
    });
    if (response.status !== 200) {
      throw new Error(`Failed to fetch repositories: ${response.statusText}`);
    }
    const repos = response.data.map(repo => ({
      name: repo.name,
      private: repo.private,
      html_url: repo.html_url,
      description: repo.description,
      updated_at: repo.updated_at,
    }));
    if (repos.length === 0) {
      return { message: "No repositories found for this user." };
    }
    return repos;
  } catch (err) {
    console.error("Error fetching repos:", err.message);
    throw new Error("Failed to fetch repositories.", err.message);
  }
}


export async function CommitGitReadme(repoUrl, readmeContent, username) {
  try {
    const accessToken = await GetAccessToken(username);
    if (!accessToken) throw new Error("Access token is required");

    const [owner, repo] = extractOwnerAndRepo(repoUrl);

    // 1. Get default branch
    const repoInfo = await axios.get(`https://api.github.com/repos/${owner}/${repo}`, {
      headers: { Authorization: `token ${accessToken}` },
    });
    const defaultBranch = repoInfo.data.default_branch || "main";

    const commitUrl = `https://api.github.com/repos/${owner}/${repo}/contents/README.md`;

    // 2. Get existing README SHA (if any)
    let sha = undefined;
    try {
      const existing = await axios.get(commitUrl, {
        headers: { Authorization: `token ${accessToken}` },
      });
      sha = existing.data.sha;
    } catch (err) {
      if (err.response?.status !== 404) throw err;
    }

    // 3. Commit
    const response = await axios.put(
      commitUrl,
      {
        message: "Add autogenerated README.md",
        content: Buffer.from(readmeContent).toString("base64"),
        branch: defaultBranch,
        ...(sha && { sha }), // only include SHA if updating
      },
      {
        headers: {
          Authorization: `token ${accessToken}`,
          Accept: "application/vnd.github.v3+json",
        },
      }
    );

    if (![200, 201].includes(response.status)) {
      throw new Error(`Failed to commit README: ${response.statusText}`);
    }

    return { success: true, message: "README committed successfully." };
  } catch (err) {
    console.error("Error committing README:", err.message);
    throw new Error("Failed to commit README.");
  }
}

export async function getUserReadmes(username) {
  try {
    const data = await GetReadmeForRepo(username);
    if (!data || data.length === 0) {
      return { message: "No repositories found for this user." };
    }
    return data;
  } catch (err) {
    console.error("Error fetching repos:", err.message);
    throw new Error("Failed to fetch repositories.", err.message);
  }
}